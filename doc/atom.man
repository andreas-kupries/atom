[comment {-*- tcl -*- doctools manpage}]
[include parts/definitions.inc]
[vset VERSION 1.1]
[manpage_begin [vset LABEL_ATOM] [vset MAN_SECTION] [vset VERSION]]
[include parts/module.inc]
[require cmdr]
[titledesc [vset TITLE_ATOM]]
[description]
[include parts/welcome.inc]

While this package, from its name, looks like the public entrypoint of
the system, it is [emph not]. This package is internal, providing the
base class for all the others implementing actual storage backends.

[para] The following sections are of interest only to developers
intending to extend or modify the system, then. Everybody else can
skip this document.

[section {API to implement}]

This sections lists and describes all the methods a derived class
[emph has] to override to be a proper and functional string storage:

[list_begin definitions]
[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method id] [arg string]]

This method's implementation has to add the specified [arg string] to
the instance, and return its unique numeric identifier as the result
of the method.

[para] Multiple calls of this method for the same string have to return
the same identifier.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method str] [arg id]]

This method's implementation has to map the specified numeric [arg id]
back to its string, and return that string as the result of the
method.

[para] An error must be thrown if the [arg id] is not known to the
instance.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method names]]

This method's implementation has to return a list of all strings which
have been interned into the instance.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method exists] [arg string]]

This method's implementation has to test if the specified [arg string]
has been interned into the instance and return a boolean flag as the
result of the method.

[para] The result has to be [const true] if the string is known, and
[const false] otherwise.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method exists-id] [arg id]]

This method's implementation has to test if the specified numeric
[arg id] is known to the instance and return a boolean flag as the
result of the method.

[para] The result has to be [const true] if the id is known, and
[const false] otherwise.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method size]]

This method's implementation has to return the number of interned
strings known to the instance.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method map] [arg string] [arg id]]

This method's implementation has to add the specified [arg string] to
the instance and force an association with the specified numeric
[arg id].

[para] The result of the method has to be the empty string.

[para] An error has to be thrown if the [arg id] is already used for a
different string.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method clear]]

This method's implementation has to drop all string/id mappings from
the instance.  After this method has run the instance must be empty.

[para] The result of this method must be the empty string.

[list_end]

[section {API hooks}]

This sections lists base class method a derived class [emph may]
override. While they have implementations these are generic and may
not be as efficient as possible for the derived class and its full
access to its own datastructures.

[list_begin definitions]
[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method serialize]]

This method's implementation has to serialize the content of the
instance, i.e. the string-to-id map and return it as the result of the
method.

[para] The result has to be a Tcl dictionary with the strings as keys
and the associated identifiers as the values.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method deserialize] [arg serialization]]

This method's implementation has to take a [arg serialization] as
generated by method [method serialize] and add it to the instance.

It has to use the semantics of method [method map] for this, to
preserve the exact string/id mapping found in the input. On the
flip-side this means that existing mappings may interfere, in that case an
error has to be thrown.

[para] The result of the method has to be the empty string.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method load] [arg serialization]]

This method's implementation has to take a [arg serialization] as
generated by method [method serialize] and have it replace the
previous content of the instance.

[para] The result of the method has to be the empty string.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method merge] [arg serialization]]

This method's implementation has to take a [arg serialization] as
generated by method [method serialize] and add the strings it
contains to the instance, per the semantics of method [method id].

[para] The ids found in the [arg serialization] do not matter and have
to be ignored.

[para] The result of the method has to be the empty string.

[list_end]
[include parts/feedback.inc]
[manpage_end]
