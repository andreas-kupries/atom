## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for atom stores, common parts across implementations.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy an instance of the store under test.

# ------------*----------------
# dispatch    | *
# destroy     | *
# ------------*----------------
# +=          | -> merge
# -->         | -> serialize
# :=          | -> load
# <--         | -> deserialize
# ------------*----------------
# clear       | *
# deserialize | *
# exists      | *
# exists-id   | *
# id          | *
# load        | *
# map         | *
# merge       | *
# names       | *
# serialize   | *
# size        | *
# str         | *
# ------------*----------------

# # ## ### ##### ######## ############# #####################
## dispatch

test atom::[who]-dispatch-1.0 {instance, no method} -setup {
    new-store
} -body {
    myatom
} -cleanup {
    release-store
} -returnCodes error \
    -result {wrong # args: should be "myatom method ?arg ...?"}

test atom::[who]-dispatch-1.1 {instance, bad method name} -setup {
    new-store
} -body {
    myatom foo
} -cleanup {
    release-store
} -returnCodes error \
    -result [badmethod foo {+= --> := <-- clear deserialize destroy exists id load map merge names serialize size str}]

# # ## ### ##### ######## ############# #####################
## destructor

test atom::[who]-destroy-1.0 {destroy, wrong#args, too many} -setup {
    new-store
} -body {
    myatom destroy X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom destroy"}

test atom::[who]-destroy-1.1 {destroy} -setup {
    new-store
} -body {
    release-store
    info commands ::myatom
} -result {}

# # ## ### ##### ######## ############# #####################
## clear

test atom::[who]-clear-1.0 {clear, wrong#args, too many} -setup {
    new-store
} -body {
    myatom clear S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom clear"}

test atom::[who]-clear-1.1 {clear, none} -setup {
    new-store
} -body {
    list [myatom size] [myatom clear] [myatom size]
} -cleanup {
    release-store
} -result {0 {} 0}

test atom::[who]-clear-1.2 {clear, some} -setup {
    new-store
    myatom id S
    myatom id A
    myatom id R
    myatom id C
} -body {
    list [myatom size] [myatom clear] [myatom size]
} -cleanup {
    release-store
} -result {4 {} 0}

# # ## ### ##### ######## ############# #####################
## deserialize, <--

test atom::[who]-deserialize-1.0 {deserialize, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom deserialize
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom deserialize serial"}

test atom::[who]-deserialize-1.1 {deserialize, wrong#args, too many} -setup {
    new-store
} -body {
    myatom deserialize S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom deserialize serial"}

test atom::[who]-deserialize-1.2 {deserialize, nothing over empty} -setup {
    new-store
} -body {
    myatom deserialize {}
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-deserialize-1.3 {deserialize, some over empty} -setup {
    new-store
} -body {
    myatom deserialize {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result {a 4 g 6 s 1}

test atom::[who]-deserialize-1.4 {deserialize, nothing over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom deserialize {}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 1] L [nth 3] S [nth 2]]

test atom::[who]-deserialize-1.5 {deserialize, some over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom deserialize {s 4 a 5 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 1] a 5 g 6 L [nth 3] S [nth 2] s 4]

test atom::[who]-deserialize-1.6 {deserialize, some over some, conflicts} -setup {
    new-store
    myatom id A ; # 0
    myatom id S ; # 1, conflict 's'.
    myatom id L ; # 2
} -body {
    myatom deserialize {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -returnCodes error -result "Id conflict for \"1\", maps to \"[deserX6char]\" != \"s\""

test atom::[who]-deserialize-1.7 {deserialize, some over some, conflicts} -setup {
    new-store
    myatom id A
    myatom id S ; # conflict, id mismatch
    myatom id L
} -body {
    myatom deserialize {S 7 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -returnCodes error -result "String conflict for \"S\", maps to \"[nth 2]\" != \"7\""

test atom::[who]-deserialize-2.0 {<--, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom <--
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom <-- serial"}

test atom::[who]-deserialize-2.1 {<--, wrong#args, too many} -setup {
    new-store
} -body {
    myatom <-- S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom <-- serial"}

test atom::[who]-deserialize-2.2 {<--, nothing over empty} -setup {
    new-store
} -body {
    myatom <-- {}
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-deserialize-2.3 {<--, some over empty} -setup {
    new-store
} -body {
    myatom <-- {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result {a 4 g 6 s 1}

test atom::[who]-deserialize-2.4 {<--, nothing over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom <-- {}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 1] L [nth 3] S [nth 2]]

test atom::[who]-deserialize-2.5 {<--, some over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom <-- {s 5 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 1] a 4 g 6 L [nth 3] S [nth 2] s 5]

test atom::[who]-deserialize-2.6 {<--, some over some, conflicts} -setup {
    new-store
    myatom id A ; # 0
    myatom id S ; # 1, conflict 's'.
    myatom id L ; # 2
} -body {
    myatom <-- {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -returnCodes error -result "Id conflict for \"1\", maps to \"[deserX6char]\" != \"s\""

test atom::[who]-deserialize-2.7 {<--, some over some, conflicts} -setup {
    new-store
    myatom id A ; #
    myatom id S ; # conflict, id mismatch
    myatom id L ; #
} -body {
    myatom <-- {S 7 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -returnCodes error -result "String conflict for \"S\", maps to \"[nth 2]\" != \"7\""

# # ## ### ##### ######## ############# #####################
## exists

test atom::[who]-exists-1.0 {exists, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom exists
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom exists string"}

test atom::[who]-exists-1.1 {exists, wrong#args, too many} -setup {
    new-store
} -body {
    myatom exists S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom exists string"}

test atom::[who]-exists-1.2 {exists, no} -setup {
    new-store
} -body {
    myatom exists S
} -cleanup {
    release-store
} -result 0

test atom::[who]-exists-1.3 {exists, yes} -setup {
    new-store
    myatom id S
} -body {
    myatom exists S
} -cleanup {
    release-store
} -result 1

# # ## ### ##### ######## ############# #####################
## exists-id

test atom::[who]-exists-id-1.0 {exists-id, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom exists-id
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom exists-id id"}

test atom::[who]-exists-id-1.1 {exists-id, wrong#args, too many} -setup {
    new-store
} -body {
    myatom exists-id S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom exists-id id"}

test atom::[who]-exists-id-1.2 {exists-id, no} -setup {
    new-store
} -body {
    myatom exists-id 5
} -cleanup {
    release-store
} -result 0

test atom::[who]-exists-id-1.3 {exists-id, yes} -setup {
    new-store
    myatom id S
} -body {
    myatom exists-id [nth 1]
} -cleanup {
    release-store
} -result 1

# # ## ### ##### ######## ############# #####################
## id

test atom::[who]-id-1.0 {id, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom id
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom id string"}

test atom::[who]-id-1.1 {id, wrong#args, too many} -setup {
    new-store
} -body {
    myatom id S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom id string"}

test atom::[who]-id-1.2 {id} -setup {
    new-store
} -body {
    myatom id S
} -cleanup {
    release-store
} -result [nth 1]

test atom::[who]-id-1.3 {id, duplicates have same id} -setup {
    new-store
} -body {
    list [myatom id S] [myatom id S]
} -cleanup {
    release-store
} -result [list [nth 1] [nth 1]]

test atom::[who]-id-1.4 {id, different strings, different ids} -setup {
    new-store
} -body {
    list [myatom id S] [myatom id S2]
} -cleanup {
    release-store
} -result [list [nth 1] [nth 2]]

test atom::[who]-map-1.5 {id, avoid conflicts} -setup {
    # see *.test, procedure [map15] for details, also test merge-[12].6
    new-store
    myatom map A 3
    myatom map S 5
    myatom map L 1
} -body {
    myatom id s
    myatom id a
    myatom id g
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [map15]

# # ## ### ##### ######## ############# #####################
## load

test atom::[who]-load-1.0 {load, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom load
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom load serial"}

test atom::[who]-load-1.1 {load, wrong#args, too many} -setup {
    new-store
} -body {
    myatom load S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom load serial"}

test atom::[who]-load-1.2 {load, nothing over empty} -setup {
    new-store
} -body {
    myatom load {}
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-load-1.3 {load, some over empty} -setup {
    new-store
} -body {
    myatom load {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result {a 4 g 6 s 1}

test atom::[who]-load-1.4 {load, nothing over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom load {}
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-load-1.5 {load, some over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom load {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result {a 4 g 6 s 1}

test atom::[who]-load-2.0 {:=, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom :=
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom := serial"}

test atom::[who]-load-2.1 {:=, wrong#args, too many} -setup {
    new-store
} -body {
    myatom := S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom := serial"}

test atom::[who]-load-2.2 {:=, nothing over empty} -setup {
    new-store
} -body {
    myatom := {}
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-load-2.3 {:=, some over empty} -setup {
    new-store
} -body {
    myatom := {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result {a 4 g 6 s 1}

test atom::[who]-load-2.4 {:=, nothing over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom := {}
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-load-2.5 {:=, some over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom := {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result {a 4 g 6 s 1}

# # ## ### ##### ######## ############# #####################
## map

test atom::[who]-map-1.0 {map, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom map
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom map string id"}

test atom::[who]-map-1.1 {map, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom map S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom map string id"}

test atom::[who]-map-1.2 {map, wrong#args, too many} -setup {
    new-store
} -body {
    myatom map S I A
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom map string id"}

test atom::[who]-map-1.3 {map, string conflict} -setup {
    new-store
} -body {
    myatom map S 0
    myatom map S 1
} -cleanup {
    release-store
} -returnCodes error -result {String conflict for "S", maps to "0" != "1"}

test atom::[who]-map-1.4 {map, id conflict} -setup {
    new-store
} -body {
    myatom map S 0
    myatom map A 0
} -cleanup {
    release-store
} -returnCodes error -result {Id conflict for "0", maps to "S" != "A"}

test atom::[who]-map-1.5 {map, no conflict} -setup {
    new-store
} -body {
    myatom map S 22
    myatom map S 22
} -cleanup {
    release-store
} -result 22

test atom::[who]-map-1.6 {map} -setup {
    new-store
} -body {
    myatom map S 1
    myatom serialize
} -cleanup {
    release-store
} -result {S 1}

test atom::[who]-map-1.7 {map, multiple} -setup {
    new-store
} -body {
    myatom map S 1
    myatom map A 5
    myatom map R 0
    myatom map C 3
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result {A 5 C 3 R 0 S 1}

# # ## ### ##### ######## ############# #####################
## merge

test atom::[who]-merge-1.0 {merge, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom merge
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom merge serial"}

test atom::[who]-merge-1.1 {merge, wrong#args, too many} -setup {
    new-store
} -body {
    myatom merge S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom merge serial"}

test atom::[who]-merge-1.2 {merge, nothing over empty} -setup {
    new-store
} -body {
    myatom merge {}
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-merge-1.3 {merge, some over empty} -setup {
    new-store
} -body {
    myatom merge {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list a [nth 2] g [nth 3] s [nth 1]]

test atom::[who]-merge-1.4 {merge, nothing over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom merge {}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 1] L [nth 3] S [nth 2]]

test atom::[who]-merge-1.5 {merge, some over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom merge {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 1] a [nth 5] g [nth 6] L [nth 3] S [nth 2] s [nth 4]]

test atom::[who]-merge-1.6 {merge, some over some, avoid conflicts} -setup {
    # see *.test, procedure [map15] for details, also test map-1.5
    new-store
    myatom load {A 3 S 5 L 1}
} -body {
    myatom merge {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [map15]

test atom::[who]-merge-2.0 {+=, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom +=
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom += serial"}

test atom::[who]-merge-2.1 {+=, wrong#args, too many} -setup {
    new-store
} -body {
    myatom += S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom += serial"}

test atom::[who]-merge-2.2 {+=, nothing over empty} -setup {
    new-store
} -body {
    myatom += {}
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-merge-2.3 {+=, some over empty} -setup {
    new-store
} -body {
    myatom += {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list a [nth 2] g [nth 3] s [nth 1]]

test atom::[who]-merge-2.4 {+=, nothing over some} -setup {
    new-store
    myatom id A
    myatom id S
    myatom id L
} -body {
    myatom += {}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 1] L [nth 3] S [nth 2]]

test atom::[who]-merge-2.5 {+=, some over some} -setup {
    new-store
    myatom id A ; # 0
    myatom id S ; # 1
    myatom id L ; # 2
} -body {
    myatom += {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 1] a [nth 5] g [nth 6] L [nth 3] S [nth 2] s [nth 4]]

test atom::[who]-merge-2.6 {+=, some over some, avoid conflicts} -setup {
    # see *.test, procedure [map15] for details, also test map-1.5
    new-store
    myatom load {A 3 S 5 L 1}
} -body {
    myatom += {s 1 a 4 g 6}
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [map15]

# # ## ### ##### ######## ############# #####################
## names

test atom::[who]-names-1.0 {names, wrong#args, too many} -setup {
    new-store
} -body {
    myatom names S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom names"}

test atom::[who]-names-1.1 {names, none} -setup {
    new-store
} -body {
    myatom names
} -cleanup {
    release-store
} -result {}

test atom::[who]-names-1.2 {names, some} -setup {
    new-store
    myatom id S
    myatom id A
    myatom id R
    myatom id C
} -body {
    lsort -dict [myatom names]
} -cleanup {
    release-store
} -result {A C R S}

# # ## ### ##### ######## ############# #####################
## serialize, -->

test atom::[who]-serialize-1.0 {serialize, wrong#args, too many} -setup {
    new-store
} -body {
    myatom serialize S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom serialize"}

test atom::[who]-serialize-1.1 {serialize, none} -setup {
    new-store
} -body {
    myatom serialize
} -cleanup {
    release-store
} -result {}

test atom::[who]-serialize-1.2 {serialize, some} -setup {
    new-store
    myatom id S
    myatom id A
    myatom id R
    myatom id C
} -body {
    kt dictsort [myatom serialize]
} -cleanup {
    release-store
} -result [list A [nth 2] C [nth 4] R [nth 3] S [nth 1]]

test atom::[who]-serialize-2.0 {-->, wrong#args, too many} -setup {
    new-store
} -body {
    myatom --> S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom -->"}

test atom::[who]-serialize-2.1 {-->, none} -setup {
    new-store
} -body {
    myatom -->
} -cleanup {
    release-store
} -result {}

test atom::[who]-serialize-2.2 {-->, some} -setup {
    new-store
    myatom id S
    myatom id A
    myatom id R
    myatom id C
} -body {
    kt dictsort [myatom -->]
} -cleanup {
    release-store
} -result [list A [nth 2] C [nth 4] R [nth 3] S [nth 1]]

# # ## ### ##### ######## ############# #####################
## size

test atom::[who]-size-1.0 {size, wrong#args, too many} -setup {
    new-store
} -body {
    myatom size X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom size"}

test atom::[who]-size-1.1 {size} -setup {
    new-store
    myatom id A
} -body {
    myatom size
} -cleanup {
    release-store
} -result 1

test atom::[who]-size-1.2 {size} -setup {
    new-store
    myatom id A
    myatom id B
} -body {
    myatom size
} -cleanup {
    release-store
} -result 2

# # ## ### ##### ######## ############# #####################
## str

test atom::[who]-str-1.0 {str, wrong#args, not enough} -setup {
    new-store
} -body {
    myatom str
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom str id"}

test atom::[who]-str-1.1 {str, wrong#args, too many} -setup {
    new-store
} -body {
    myatom str S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myatom str id"}

test atom::[who]-str-1.2 {str, unknown id} -setup {
    new-store
} -body {
    myatom str 0
} -cleanup {
    release-store
} -returnCodes error -result {Expected string id, got "0"}

test atom::[who]-str-1.3 {str, known} -setup {
    new-store
    myatom id S
} -body {
    myatom str [nth 1]
} -cleanup {
    release-store
} -result S

test atom::[who]-str-1.4 {str, known} -setup {
    new-store
    myatom id S
    myatom id A
    myatom id R
    myatom id C
} -body {
    myatom str [nth 3]
} -cleanup {
    release-store
} -result R

# # ## ### ##### ######## ############# #####################
return
