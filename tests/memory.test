# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
# # ## ### ##### ######## ############# #####################
## memory.test:  tests for the atom::memory package.

kt check Tcl     8.5
kt check tcltest 2

kt require support TclOO

kt local   support atom
kt local   testing atom::memory

# # ## ### ##### ######## ############# #####################

proc already {cmd} {
    return "can't create object \"$cmd\": command already exists with that name"
}

proc badmethod {m real} {
    set real [string map {{, or} { or}} [linsert [join $real {, }] end-1 or]]
    return "unknown method \"$m\": must be $real"
}

proc new-store {} {
    return [atom::memory create myatom]
}

proc release-store {} {
    myatom destroy
    return
}

# Standard id for the n'th interned string.
# n counting from 1.
proc nth {x} { incr x -1 }

# identification to put into names of shared test cases.
proc who {} { return sqlite }

# # ## ### ##### ######## ############# #####################
## Custom result of test cases in atom.testsuite affected by
## generation-order of ids.

# deserialize-[12].6
proc deserX6char {} { return S }

# map-1.5, merge-[12].6
# memory uses dict size as generator, and then increments while conflicting.
# this can fill in holes, at least partially.
# myatom id s ; # nominal 3, avoid, go 4
# myatom id a ; # nominal 4, avoid, avoid 5, go 6
# myatom id g ; # nominal 5, avoid, avoid 6, go 7
proc map15 {} { return {A 3 a 6 g 7 L 1 S 5 s 4} }

# # ## ### ##### ######## ############# #####################
## Two testsuites, for the custom (instantiation) and shared APIs.

kt source memory.testsuite
kt source atom.testsuite

# # ## ### ##### ######## ############# #####################
cleanupTests
