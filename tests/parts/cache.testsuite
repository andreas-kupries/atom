## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for cache stores, custom parts.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy aqn instance of the store under test.

# # ## ### ##### ######## ############# #####################

test [test-class]-1.0 {new, wrong#args, not enough} -body {
    atom::cache new
} -returnCodes error -result {wrong # args: should be "atom::cache new backend"}

test [test-class]-1.1 {new, wrong#args, too many} -body {
    atom::cache new B X
} -returnCodes error -result {wrong # args: should be "atom::cache new backend"}

test [test-class]-1.2 {create, wrong#args, not enough} -body {
    atom::cache create foo
} -returnCodes error -result {wrong # args: should be "atom::cache create foo backend"}

test [test-class]-1.3 {create, wrong#args, too many} -body {
    atom::cache create foo B X
} -returnCodes error -result {wrong # args: should be "atom::cache create foo backend"}

test [test-class]-1.4 {constructor, create, existing command} -setup {
    atom::memory create X
    atom::cache create test-cache-store X
} -body {
    atom::cache create test-cache-store X
} -cleanup {
    test-cache-store destroy
    X destroy
} -returnCodes error -result [already test-cache-store]

test [test-class]-1.5 {constructor, create, existing command} -setup {
    atom::memory create X
} -body {
    atom::cache create set X
} -cleanup {
    X destroy
} -returnCodes error -result [already set]

test [test-class]-1.6 {constructor, create} -setup {
    set result {}
    atom::memory create test-cache-backend
} -body {
    lappend result [atom::cache create test-cache-store test-cache-backend]
    lappend result [info commands ::test-cache-store]
    lappend result [test-cache-store size]
} -cleanup {
    test-cache-store destroy
    test-cache-backend destroy
    unset result
} -result {::test-cache-store ::test-cache-store 0}

test [test-class]-1.7 {constructor, new} -setup {
    set result {}
    atom::memory create test-cache-backend
} -body {
    lappend result [set foo [atom::cache new test-cache-backend]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    test-cache-backend destroy
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0}

# # ## ### ##### ######## ############# #####################

test [test-class]-1.8 {exists, authoritative backend} -setup {
    new-store
    test-backend id S
    test-backend id A
    test-backend id R
    # cache doesn't know this.
} -body {
    test-store exists S
} -cleanup {
    release-store
} -result 1

test [test-class]-1.9 {names, authoritative backend} -setup {
    new-store
    test-backend id S
    test-backend id A
    test-backend id R
    # cache doesn't know this.
} -body {
    lsort -dict [test-store names]
} -cleanup {
    release-store
} -result {A R S}

test [test-class]-1.10 {serialize, authoritative backend} -setup {
    new-store
    test-backend id S
    test-backend id A
    test-backend id R
    # cache doesn't know this.
} -body {
    kt dictsort [test-store serialize]
} -cleanup {
    release-store
} -result [list A [nth 2] R [nth 3] S [nth 1]]

test [test-class]-1.11 {size, authoritative backend} -setup {
    new-store
    test-backend id S
    test-backend id A
    test-backend id R
    # cache doesn't know this.
} -body {
    test-store size
} -cleanup {
    release-store
} -result 3

test [test-class]-1.12 {str, authoritative backend} -setup {
    new-store
    test-backend id S
    test-backend id A
    test-backend id R
    # cache doesn't know this.
} -body {
    test-store str [nth 2]
} -cleanup {
    release-store
} -result A

# deserialize, load, merge

test [test-class]-2.0 {deserialize visible in backend} -setup {
    new-store
    test-store deserialize {z 0 a 3}
} -body {
    kt dictsort [test-backend serialize]
} -cleanup {
    release-store
} -result {a 3 z 0}

test [test-class]-2.1 {load visible in backend} -setup {
    new-store
    test-store load {z 0 a 3}
} -body {
    kt dictsort [test-backend serialize]
} -cleanup {
    release-store
} -result {a 3 z 0}

test [test-class]-2.3 {merge visible in backend} -setup {
    new-store
    test-store merge {z 0 a 3}
} -body {
    kt dictsort [test-backend serialize]
} -cleanup {
    release-store
} -result [list a [nth 2] z [nth 1]]

# # ## ### ##### ######## ############# #####################
return
